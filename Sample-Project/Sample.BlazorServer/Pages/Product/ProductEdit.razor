@page "/Product/Edit/{Id}"
@using Sample.BlazorServer.Endpoints
@inject IProductRepository _productRepo
@inject NavigationManager _Nav

<h2>Edit</h2>
@if(int.Parse(Id)<1||string.IsNullOrWhiteSpace(Id))
{
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        <strong>Something went wrong!</strong>
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}
else if (dto==null)
{
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        <strong>Loading......</strong>
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}
else
{
        

<EditForm Model="dto" OnValidSubmit="HandleProductCreate">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group">
        <label for="exampleInputEmail1">Product Name</label>
        <input type="text" class="form-control" @bind-value="dto.ProductName">
    </div>
    <div class="form-group">
        <label for="exampleInputEmail1">Product Price</label>
        <input type="number" class="form-control" @bind-value="dto.ProductPrice">
    </div>
    <div class="form-group">
        <label for="exampleInputEmail1">Product Category</label>
        <input type="text" class="form-control" @bind-value="dto.ProductCategory">
    </div>
    <div class="form-group">
        <label for="exampleInputEmail1">Product Description</label>
        <input type="text" class="form-control" @bind-value="dto.ProductDescription">
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>
}

@code {
    [Parameter]
    public string Id { get; set; }
    private ProductDTO dto = new ProductDTO();
    private bool IsSuccess = true;
    protected override async Task OnInitializedAsync()
    {
        string apiUrl = StaticEndpoints.GetSingleProductsEndpoint;
        int id = Convert.ToInt32(Id);
        dto = await _productRepo.GetById(apiUrl, id);
    }
    protected async Task HandleProductCreate()
    {
        IsSuccess = false;
        string apiUrl = StaticEndpoints.EditProductEndpoint;
        dto.EntryDate = DateTime.Now;
        dto.ProductImage = "";
        int id = Convert.ToInt32(Id);
        IsSuccess = await _productRepo.Update(apiUrl, id, dto);
        if (IsSuccess)
        {
            _Nav.NavigateTo("/Product/List");
        }
    }
}
